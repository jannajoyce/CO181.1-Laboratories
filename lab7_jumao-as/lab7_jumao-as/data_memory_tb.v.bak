`timescale 1ns / 1ps

module data_memory_tb;

    // Inputs
    reg clock;
    reg reset;
    reg [31:0] addr_in;
    reg [31:0] writedata_in;
    reg re_in;
    reg we_in;
    reg [1:0] size_in;
    reg [7:0] serial_in;
    reg serial_ready_in;
    reg serial_valid_in;

    // Outputs
    wire [31:0] readdata_out;
    wire [7:0] serial_out;
    wire serial_rden_out;
    wire serial_wren_out;

    // Instantiate the data_memory module
    data_memory uut (
        .clock(clock),
        .reset(reset),
        .addr_in(addr_in),
        .writedata_in(writedata_in),
        .re_in(re_in),
        .we_in(we_in),
        .size_in(size_in),
        .readdata_out(readdata_out),
        .serial_in(serial_in),
        .serial_ready_in(serial_ready_in),
        .serial_valid_in(serial_valid_in),
        .serial_out(serial_out),
        .serial_rden_out(serial_rden_out),
        .serial_wren_out(serial_wren_out)
    );

    // Clock generation
    always #5 clock = ~clock;

    // Test procedure
    initial begin
        // Initialize inputs
        clock = 0;
        reset = 1;
        addr_in = 32'h0;
        writedata_in = 32'h0;
        re_in = 0;
        we_in = 0;
        size_in = 2'b00;
        serial_in = 8'b0;
        serial_ready_in = 1;
        serial_valid_in = 1;

        // Reset the system
        #10 reset = 0;

        // Test Data Segment
        addr_in      = 32'h10000008;
        writedata_in = 32'h12345678;
        we_in        = 1;
        #10;
        we_in        = 0;
        re_in        = 1;
        #10;
        $display("Data Segment 2: Addr=%h, ReadData=%h (Expected: 12345678)", addr_in, readdata_out);
        re_in        = 0;

        // Test lower boundary of Stack Segment
        addr_in      = 32'h7FFF0000;
        writedata_in = 32'hAAAAAAAA;
        we_in        = 1;
        #10;
        we_in        = 0;
        re_in        = 1;
        #10;
        $display("Stack Segment Lower Bound: Addr=%h, ReadData=%h (Expected: AAAAAAAA)", addr_in, readdata_out);
        re_in        = 0;

        // Test upper boundary of Stack Segment
        addr_in      = 32'h7FFFFFFC;
        writedata_in = 32'hBBBBBBBB;
        we_in        = 1;
        #10;
        we_in        = 0;
        re_in        = 1;
        #10;
        $display("Stack Segment Upper Bound: Addr=%h, ReadData=%h (Expected: BBBBBBBB)", addr_in, readdata_out);
        re_in        = 0;

        // Test Serial Read Data Register (Read-only)
        addr_in      = 32'hFFFF0004;
        re_in        = 1;
        #10;
        $display("Serial Read: Addr=%h, ReadData=%h", addr_in, readdata_out);
        re_in        = 0;

        // Test Serial Read Ready Register
        addr_in      = 32'hFFFF0000;
        re_in        = 1;
        #10;
        $display("Serial Read Ready: Addr=%h, ReadReady=%b", addr_in, readdata_out[0]);
        re_in        = 0;

        // Test writing to an invalid memory address (e.g., address not mapped)
        addr_in      = 32'h30000000;
        writedata_in = 32'hFEEDFACE;
        we_in        = 1;
        #10;
        we_in        = 0;
        re_in        = 1;
        #10;
        $display("Invalid Address Write/Read: Addr=%h, ReadData=%h (Check behavior)", addr_in, readdata_out);
        re_in        = 0;

        // Test reset behavior (clears everything if supported)
        reset        = 1;
        #10;
        reset        = 0;
        addr_in      = 32'h10000008;
        re_in        = 1;
        #10;
        $display("After Reset: Addr=%h, ReadData=%h (Expected: 00000000 if cleared)", addr_in, readdata_out);
        re_in        = 0;

        // End simulation
        #50;
        $finish;
    end

endmodule